/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "ModThreeGaus.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ModThreeGaus); 

 ModThreeGaus::ModThreeGaus(const char *name, const char *title, 
                        RooAbsReal& _m,
                        RooAbsReal& _m0,
                        RooAbsReal& _v0,
                        RooAbsReal& _v1,
                        RooAbsReal& _v2,
                        RooAbsReal& _s0,
                        RooAbsReal& _s1,
                        RooAbsReal& _s2) :
   RooAbsPdf(name,title), 
   m("m","m",this,_m),
   m0("m0","m0",this,_m0),
   v0("v0","v0",this,_v0),
   v1("v1","v1",this,_v1),
   v2("v2","v2",this,_v2),
   s0("s0","s0",this,_s0),
   s1("s1","s1",this,_s1),
   s2("s2","s2",this,_s2)
 { 
 } 


 ModThreeGaus::ModThreeGaus(const ModThreeGaus& other, const char* name) :  
   RooAbsPdf(other,name), 
   m("m",this,other.m),
   m0("m0",this,other.m0),
   v0("v0",this,other.v0),
   v1("v1",this,other.v1),
   v2("v2",this,other.v2),
   s0("s0",this,other.s0),
   s1("s1",this,other.s1),
   s2("s2",this,other.s2)
 { 
 } 

 //Double_t ModThreeGaus::evaluate() const 
 //{ 
 //  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
 // Double_t width, power;
 // // vh - vl >> vh
 // power = vl + vr*(m - 100)/(180-100);
 // if(m <= m0) 
 //   width = sl + (s0 - sl)*(m - 100)/(m0-100);
 // else
 //   width = s0 + (sh - s0)*(m - m0)/(180 - m0);
 // return exp(-1*pow(fabs((m-m0)/width), power));
 //} 

 //// Type 2
 //Double_t ModThreeGaus::evaluate() const 
 //{ 
 //  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
 // Double_t width, power;
 // // vh - vl >> vh
 // power = v0 + v1 * (m - 100)/(180-100) + v2 * pow((m-100)/(180-100),2);
 // width = s0 + s1 * (m - 100)/(180-100) + s2 * pow((m-100)/(180-100),2);
 // return exp(-1*pow(fabs((m-m0)/width), power));
 //} 

 // Type 3
 Double_t ModThreeGaus::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
  Double_t width, power;
  power = v0 + v1 * (m - 100)/(180-100);
  width = s0 + s1 * (m - 100)/(180-100) + s2 * pow((m-100)/(180-100),2) + v2 * pow((m-100)/(180-100),3);
  return exp(-1*pow(fabs((m-m0)/width), power));
 } 
