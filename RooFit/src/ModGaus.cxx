/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "ModGaus.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ModGaus); 

 ModGaus::ModGaus(const char *name, const char *title, 
                        RooAbsReal& _m,
                        RooAbsReal& _m0,
                        RooAbsReal& _vl,
                        RooAbsReal& _vr,
                        RooAbsReal& _s0,
                        RooAbsReal& _sl,
                        RooAbsReal& _sh) :
   RooAbsPdf(name,title), 
   m("m","m",this,_m),
   m0("m0","m0",this,_m0),
   vl("vl","vl",this,_vl),
   vr("vr","vr",this,_vr),
   s0("s0","s0",this,_s0),
   sl("sl","sl",this,_sl),
   sh("sh","sh",this,_sh)
 { 
 } 


 ModGaus::ModGaus(const ModGaus& other, const char* name) :  
   RooAbsPdf(other,name), 
   m("m",this,other.m),
   m0("m0",this,other.m0),
   vl("vl",this,other.vl),
   vr("vr",this,other.vr),
   s0("s0",this,other.s0),
   sl("sl",this,other.sl),
   sh("sh",this,other.sh)
 { 
 } 


 // Original
 Double_t ModGaus::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
  Double_t width, power;
  // vh - vl >> vh
  power = vl + vr*(m - 100)/(180-100);
  if(m <= m0) 
    width = sl + (s0 - sl)*(m - 100)/(m0-100);
  else
    width = s0 + (sh - s0)*(m - m0)/(180 - m0);
  return exp(-1*pow(fabs((m-m0)/width), power));
 } 

 //// Type 0. Please make s0 a constant because it is not used.
//  Double_t ModGaus::evaluate() const 
//  { 
//    // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
//   Double_t width, power;
//   // vh - vl >> vh
//   power = vl + vr*(m - 100)/(180-100);
//   width = sl + sh*(m - 100)/(180-100);
//   return exp(-1*pow(fabs((m-m0)/width), power));
//  } 

 //// Type 1-1
 //Double_t ModGaus::evaluate() const 
 //{ 
 //  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
 // Double_t width, power;
 // // vh - vl >> vh
 // power = vl + vr*(m - 100)/(180-100);
 // width = sl + s0 * (m - 100)/(180-100) + sh * pow((m-100)/(180-100),2);
 // return exp(-1*pow(fabs((m-m0)/width), power));
 //} 

 //// Type 1-2
 //Double_t ModGaus::evaluate() const 
 //{ 
 //  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
 // Double_t width, power;
 // // vh - vl >> vh
 // width = vl + vr*(m - 100)/(180-100);
 // power = sl + s0 * (m - 100)/(180-100) + sh * pow((m-100)/(180-100),2);
 // return exp(-1*pow(fabs((m-m0)/width), power));
 //} 
